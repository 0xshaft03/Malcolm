diff --git a/CHANGELOG b/CHANGELOG
index 3878d951..f276fcfb 100644
--- a/CHANGELOG
+++ b/CHANGELOG
@@ -39,6 +39,7 @@ NOTICE: Cross-cluster Shortcuts require you to not restart all your viewers at o
   - capture - save sessions not saving packets for across restarts
   - capture - afpacket rewrite, improve performance & less out of order packets
   - capture - fix quic crash
+  - capture - make creating fields from config/parsers/wise/tagger use ES bulk call
   - capture/viewer - new outer fields replace gre fields (PR #1889)
   - cont3xt - new Cont3xt application, see https://arkime.com/cont3xt
   - cont3xt/viewer - share new user UI
diff --git a/capture/bsb.h b/capture/bsb.h
index 282e81d4..8ac4df26 100644
--- a/capture/bsb.h
+++ b/capture/bsb.h
@@ -13,12 +13,12 @@
 #define BSB_INIT(b, buffer, size)                 \
 do {                                              \
     (b).buf = (unsigned char*)buffer;             \
-    (b).ptr = (unsigned char*)buffer;             \
+    (b).ptr = (b).buf;                            \
     int s = (int)size;                            \
-    if ((buffer == NULL) || (s < 0))              \
+    if (((b).buf == NULL) || (s < 0))             \
         (b).end = 0;                              \
     else                                          \
-        (b).end = (unsigned char*)buffer + size;  \
+        (b).end = (b).buf + size;                 \
 } while (0)
 
 #define BSB_SET_ERROR(b) ((b).end = NULL)
diff --git a/capture/db.c b/capture/db.c
index a21d853a..70be2c19 100644
--- a/capture/db.c
+++ b/capture/db.c
@@ -2366,22 +2366,39 @@ LOCAL void moloch_db_load_fields()
     free(data);
 }
 /******************************************************************************/
+LOCAL BSB   fieldBSB;
+LOCAL int   fieldBSBTimeout;
+LOCAL gboolean moloch_db_fieldsbsb_timeout(gpointer UNUSED(user_data))
+{
+    if (fieldBSB.buf && BSB_LENGTH(fieldBSB) > 0) {
+        moloch_http_schedule(esServer, "POST", "/_bulk", 6, (char *)fieldBSB.buf, BSB_LENGTH(fieldBSB), NULL, MOLOCH_HTTP_PRIORITY_BEST, NULL, NULL);
+        BSB_INIT(fieldBSB, moloch_http_get_buffer(config.dbBulkSize), config.dbBulkSize);
+    }
+    fieldBSBTimeout = 0;
+    return G_SOURCE_REMOVE;
+}
+/******************************************************************************/
+LOCAL void moloch_db_fieldbsb_make()
+{
+    if (!fieldBSB.buf) {
+        BSB_INIT(fieldBSB, moloch_http_get_buffer(config.dbBulkSize), config.dbBulkSize);
+        fieldBSBTimeout = g_timeout_add_seconds(1, moloch_db_fieldsbsb_timeout, 0);
+    } else if (BSB_REMAINING(fieldBSB) < 1000) {
+        g_source_remove(fieldBSBTimeout);
+        moloch_db_fieldsbsb_timeout(0);
+        fieldBSBTimeout = g_timeout_add_seconds(1, moloch_db_fieldsbsb_timeout, 0);
+    }
+}
+/******************************************************************************/
 void moloch_db_add_field(char *group, char *kind, char *expression, char *friendlyName, char *dbField, char *help, int haveap, va_list ap)
 {
-    char                   key[100];
-    int                    key_len;
-    BSB                    bsb;
-
     if (config.dryRun)
         return;
 
-    char                  *json = moloch_http_get_buffer(10000);
+    moloch_db_fieldbsb_make();
 
-    BSB_INIT(bsb, json, 10000);
-
-    key_len = snprintf(key, sizeof(key), "/%sfields/_doc/%s", config.prefix, expression);
-
-    BSB_EXPORT_sprintf(bsb, "{\"friendlyName\": \"%s\", \"group\": \"%s\", \"help\": \"%s\", \"dbField2\": \"%s\", \"type\": \"%s\"",
+    BSB_EXPORT_sprintf(fieldBSB, "{\"index\": {\"_index\": \"%sfields\", \"_id\": \"%s\"}}\n", config.prefix, expression);
+    BSB_EXPORT_sprintf(fieldBSB, "{\"friendlyName\": \"%s\", \"group\": \"%s\", \"help\": \"%s\", \"dbField2\": \"%s\", \"type\": \"%s\"",
              friendlyName,
              group,
              help,
@@ -2398,41 +2415,33 @@ void moloch_db_add_field(char *group, char *kind, char *expression, char *friend
             if (!value)
                 break;
 
-            BSB_EXPORT_sprintf(bsb, ", \"%s\": ", field);
+            BSB_EXPORT_sprintf(fieldBSB, ", \"%s\": ", field);
             if (*value == '{' || *value == '[')
-                BSB_EXPORT_sprintf(bsb, "%s", value);
+                BSB_EXPORT_sprintf(fieldBSB, "%s", value);
             else
-                BSB_EXPORT_sprintf(bsb, "\"%s\"", value);
+                BSB_EXPORT_sprintf(fieldBSB, "\"%s\"", value);
         }
     }
 
-    BSB_EXPORT_u08(bsb, '}');
-    moloch_http_schedule(esServer, "POST", key, key_len, json, BSB_LENGTH(bsb), NULL, MOLOCH_HTTP_PRIORITY_NORMAL, NULL, NULL);
+    BSB_EXPORT_cstr(fieldBSB, "}\n");
 }
 /******************************************************************************/
 void moloch_db_update_field(char *expression, char *name, char *value)
 {
-    char                   key[1000];
-    int                    key_len;
-    BSB                    bsb;
-
     if (config.dryRun)
         return;
 
-    char                  *json = moloch_http_get_buffer(1000);
+    moloch_db_fieldbsb_make();
 
-    BSB_INIT(bsb, json, 1000);
+    BSB_EXPORT_sprintf(fieldBSB, "{\"update\": {\"_index\": \"%sfields\", \"_id\": \"%s\"}}\n", config.prefix, expression);
 
-    key_len = snprintf(key, sizeof(key), "/%sfields/_update/%s", config.prefix, expression);
-
-    BSB_EXPORT_sprintf(bsb, "{\"doc\": {\"%s\":", name);
+    BSB_EXPORT_sprintf(fieldBSB, "{\"doc\": {\"%s\":", name);
     if (*value == '[') {
-        BSB_EXPORT_sprintf(bsb, "%s", value);
+        BSB_EXPORT_sprintf(fieldBSB, "%s", value);
     } else {
-        moloch_db_js0n_str(&bsb, (unsigned char*)value, TRUE);
+        moloch_db_js0n_str(&fieldBSB, (unsigned char*)value, TRUE);
     }
-    BSB_EXPORT_sprintf(bsb, "}}");
-    moloch_http_schedule(esServer, "POST", key, key_len, json, BSB_LENGTH(bsb), NULL, MOLOCH_HTTP_PRIORITY_NORMAL, NULL, NULL);
+    BSB_EXPORT_cstr(fieldBSB, "}}\n");
 }
 /******************************************************************************/
 void moloch_db_update_filesize(uint32_t fileid, uint64_t filesize, uint64_t packetsSize, uint32_t packets)
@@ -2678,6 +2687,12 @@ void moloch_db_init()
 void moloch_db_exit()
 {
     if (!config.dryRun) {
+        if (fieldBSB.buf && BSB_LENGTH(fieldBSB) > 0) {
+            if (fieldBSBTimeout)
+                g_source_remove(fieldBSBTimeout);
+            moloch_db_fieldsbsb_timeout(0);
+        }
+
         for (int i = 0; timers[i]; i++) {
             g_source_remove(timers[i]);
         }
diff --git a/capture/http.c b/capture/http.c
index 1a66e5d9..62b89d76 100644
--- a/capture/http.c
+++ b/capture/http.c
@@ -354,7 +354,6 @@ LOCAL void moloch_http_add_request(MolochHttpServer_t *server, MolochHttpRequest
 
         if (!requestsTimer)
             requestsTimer = g_timeout_add(0, moloch_http_send_timer_callback, NULL);
-        } else {
     }
 }
 /******************************************************************************/
