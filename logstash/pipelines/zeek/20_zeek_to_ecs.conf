filter {

  # Map zeek fields to ECS where possible (see https://github.com/idaholab/Malcolm/issues/79)

  # For now I will add fields rather than rename them. This will preserve backwards compatibility
  # but the records will be somewhat bigger. I'll have to address what (if anything) to do with upgrades.

  #
  # Some fields (particularly AS and GEO fields) don't exist at this point in the pipeline, as they
  # are added during enrichment. In that case, I will make a note of it here and handle it in
  # ./pipelines/enrichment/20_enriched_to_ecs.conf:
  #
  # Autonomous System and Geo are handled after enrichment in 20_enriched_to_ecs.conf
  #  🗹 Autonomous System - Fields describing an Autonomous System (Internet routing prefix). - https://www.elastic.co/guide/en/ecs/current/ecs-as.html
  #  🗹 Geo - Fields describing a location. - https://www.elastic.co/guide/en/ecs/current/ecs-geo.html
  #
  # Risk/severity/priority/whatever will be done *after* enrichment based on normalized fields
  # - event.severity, event.risk_score and event.risk_score_norm
  #

  # for now don't do anything unles an env explicitly enables it
  mutate {
    id => "mutate_add_field_env_logstash_zeek_to_ecs"
    add_field => { "[@metadata][ENV_LOGSTASH_ZEEK_TO_ECS]" => "${LOGSTASH_TO_ECS:false}" }
  }
  if ([@metadata][ENV_LOGSTASH_ZEEK_TO_ECS] == "true") {

    # I will mark these ☐ off with a 🗹 or 🗷 as I address them or decide they don't need adressing

    # 🗹 Client - Fields about the client side of a network connection, used with server. - https://www.elastic.co/guide/en/ecs/current/ecs-client.html

    # client.ip / client.address
    if ([zeek][orig_h]) {
      mutate { id => "mutate_add_field_ecs_client_address"
               add_field => { "[client][address]" => "%{[zeek][orig_h]}" } }
      mutate { id => "mutate_add_field_ecs_client_ip"
               add_field => { "[client][ip]" => "%{[zeek][orig_h]}" } }
    }

    # client.port
          if ([zeek][orig_p]) {                   mutate { id => "mutate_add_field_ecs_client_port_orig_p"
                                                           add_field => { "[client][port]" => "%{[zeek][orig_p]}" } } }

    # client.domain
          if ([zeek][orig_hostname]) {            mutate { id => "mutate_add_field_ecs_client_domain_orig_hostname"
                                                           add_field => { "[client][domain]" => "%{[zeek][orig_hostname]}" } } }
    else if ([zeek_dhcp][host_name]) {            mutate { id => "mutate_add_field_ecs_client_domain_dhcp_host_name"
                                                           add_field => { "[client][domain]" => "%{[zeek_dhcp][host_name]}" } } }
    else if ([zeek_dhcp][domain]) {               mutate { id => "mutate_add_field_ecs_client_domain_dhcp_domain"
                                                           add_field => { "[client][domain]" => "%{[zeek_dhcp][domain]}" } } }
    else if ([zeek_ntlm][host]) {                 mutate { id => "mutate_add_field_ecs_client_domain_ntlm_host_name"
                                                           add_field => { "[client][domain]" => "%{[zeek_ntlm][host]}" } } }
    else if ([zeek_ntlm][domain]) {               mutate { id => "mutate_add_field_ecs_client_domain_ntlm_domain"
                                                           add_field => { "[client][domain]" => "%{[zeek_ntlm][domain]}" } } }

    # client.mac
          if ([zeek][orig_l2_addr]) {             mutate { id => "mutate_add_field_ecs_client_mac_orig_l2_addr"
                                                           add_field => { "[client][mac]" => "%{[zeek][orig_l2_addr]}" } } }
    else if ([zeek_dhcp][mac]) {                  mutate { id => "mutate_add_field_ecs_client_mac_dhcp_mac"
                                                           add_field => { "[client][mac]" => "%{[zeek_dhcp][mac]}" } } }
    else if ([zeek_radius][mac]) {                mutate { id => "mutate_add_field_ecs_client_mac_radius_mac"
                                                           add_field => { "[client][mac]" => "%{[zeek_radius][mac]}" } } }

    # client.bytes
          if ([zeek_conn][orig_ip_bytes]) {       mutate { id => "mutate_add_field_ecs_client_bytes_conn_orig_ip_bytes"
                                                           add_field => { "[client][bytes]" => "%{[zeek_conn][orig_ip_bytes]}" } } }
    else if ([zeek_conn][orig_bytes]) {           mutate { id => "mutate_add_field_ecs_client_bytes_conn_orig_bytes"
                                                           add_field => { "[client][bytes]" => "%{[zeek_conn][orig_bytes]}" } } }
    else if ([zeek_http][request_body_len]) {     mutate { id => "mutate_add_field_ecs_client_bytes_http_request_body_len"
                                                           add_field => { "[client][bytes]" => "%{[zeek_http][request_body_len]}" } } }
    else if ([zeek_mqtt_publish][payload_len]) {  mutate { id => "mutate_add_field_ecs_client_bytes_mqtt_publish_payload_len"
                                                           add_field => { "[client][bytes]" => "%{[zeek_mqtt_publish][payload_len]}" } } }
    else if ([zeek_sip][request_body_len]) {      mutate { id => "mutate_add_field_ecs_client_bytes_sip_request_body_len"
                                                           add_field => { "[client][bytes]" => "%{[zeek_sip][request_body_len]}" } } }

    # client.packets
         if ([zeek_conn][orig_pkts]) {            mutate { id => "mutate_add_field_ecs_client_packets_conn_orig_pkts"
                                                           add_field => { "[client][packets]" => "%{[zeek_conn][orig_pkts]}" } } }

    # 🗹 Server - Fields about the server side of a network connection, used with client. - https://www.elastic.co/guide/en/ecs/current/ecs-server.html

    # server.ip / server.address
    if ([zeek][resp_h]) {
      mutate { id => "mutate_add_field_ecs_server_address"
               add_field => { "[server][address]" => "%{[zeek][resp_h]}" } }
      mutate { id => "mutate_add_field_ecs_server_ip"
               add_field => { "[server][ip]" => "%{[zeek][resp_h]}" } }
    }

    # server.port
          if ([zeek][resp_p]) {                   mutate { id => "mutate_add_field_ecs_server_port_resp_p"
                                                           add_field => { "[server][port]" => "%{[zeek][resp_p]}" } } }

    # server.domain
          if ([zeek][resp_hostname]) {            mutate { id => "mutate_add_field_ecs_server_domain_resp_hostname"
                                                           add_field => { "[server][domain]" => "%{[zeek][resp_hostname]}" } } }

    # server.mac
          if ([zeek][resp_l2_addr]) {             mutate { id => "mutate_add_field_ecs_server_mac_resp_l2_addr"
                                                           add_field => { "[server][mac]" => "%{[zeek][resp_l2_addr]}" } } }

    # server.bytes
          if ([zeek_conn][resp_ip_bytes]) {       mutate { id => "mutate_add_field_ecs_server_bytes_conn_resp_ip_bytes"
                                                           add_field => { "[server][bytes]" => "%{[zeek_conn][resp_ip_bytes]}" } } }
    else if ([zeek_conn][resp_bytes]) {           mutate { id => "mutate_add_field_ecs_server_bytes_conn_resp_bytes"
                                                           add_field => { "[server][bytes]" => "%{[zeek_conn][resp_bytes]}" } } }
    else if ([zeek_http][response_body_len]) {    mutate { id => "mutate_add_field_ecs_server_bytes_http_response_body_len"
                                                           add_field => { "[server][bytes]" => "%{[zeek_http][response_body_len]}" } } }
    else if ([zeek_sip][response_body_len]) {     mutate { id => "mutate_add_field_ecs_server_bytes_sip_response_body_len"
                                                           add_field => { "[server][bytes]" => "%{[zeek_sip][response_body_len]}" } } }

    # server.packets
         if ([zeek_conn][resp_pkts]) {            mutate { id => "mutate_add_field_ecs_server_packets_conn_resp_pkts"
                                                           add_field => { "[server][packets]" => "%{[zeek_conn][resp_pkts]}" } } }

    # ☐ Event - Fields breaking down the event details. - https://www.elastic.co/guide/en/ecs/current/ecs-event.html

    # event.action from zeek.action
         if ([zeek][action]) {                    mutate { id => "mutate_add_field_ecs_event_action"
                                                           add_field => { "[event][action]" => "%{[zeek][action]}" } } }

    # event.dataset from zeek.logtype
    mutate { id => "mutate_add_field_ecs_event_dataset"
             add_field => { "[event][dataset]" => "zeek.%{[zeek][logType]}" } }

    # event.duration
    if ([zeek_conn][duration]) {
      # convert duration (floating-point seconds) to nanoseconds
      ruby {
        id => "ruby_zeek_duration_to_ecs_event_duration"
        code => "event.set('[event][duration]', (1000000000 * event.get('[zeek_conn][duration]').to_f).round(0))"
      }
    }

    # for event.start/event.end, we'll the moloch firstPacket/lastPacket field as we already did the math
    if ([firstPacket]) {                          mutate { id => "mutate_add_field_ecs_event_start"
                                                           add_field => { "[event][start]" => "%{[firstPacket]}" } } }
    if ([lastPacket]) {                           mutate { id => "mutate_add_field_ecs_event_end"
                                                           add_field => { "[event][end]" => "%{[lastPacket]}" } } }

    # UIDs and FUIDs constitude unique IDs
    if ([zeek][uid]) {                            mutate { id => "mutate_add_field_ecs_id_uid"
                                                           merge => { "[event][id]" => "[zeek][uid]" } } }
    if ([zeek][fuid]) {                           mutate { id => "mutate_add_field_ecs_id_fuid"
                                                           merge => { "[event][id]" => "[zeek][fuid]" } } }

    # event.provider
    if (![event][provider]) {                     mutate { id => "mutate_add_field_event_provider_zeek"
                                                           add_field => { "[event][provider]" => "zeek" } } }

    # TODO: assign event.kind, event.category, event.outcome
    # https://www.elastic.co/guide/en/ecs/current/ecs-allowed-values-event-kind.html
    # https://www.elastic.co/guide/en/ecs/current/ecs-allowed-values-event-category.html
    # https://www.elastic.co/guide/en/ecs/current/ecs-allowed-values-event-outcome.html

    # ☐ DNS - Fields describing DNS queries and answers. - https://www.elastic.co/guide/en/ecs/current/ecs-dns.html
    if ([zeek_dns]) {

      # dns.resolved_ip
      if ([dns][ip]) {                            mutate { id => "mutate_merge_ecs_dhs_resolved_ip"
                                                           merge => { "[dns][resolved_ip]" => "[dns][ip]" } } }

      # dns.answers and dns.type:answer
      if ([zeek_dns][answers]) {
        ruby {
          id => "ruby_zeek_dns_answers_to_ecs"
          code => '
            event.set("[dns][answers]", [Array(event.get("[zeek_dns][answers]")), Array(event.get("[zeek_dns][TTLs]"))].transpose.map{ |d| Hash[[:data, :ttl].zip(d)] })
        '}
        mutate { id => "mutate_add_field_ecs_dns_type_answer"
                 add_field => { "[dns][type]" => "answer" } }
      }

      # dns.op_code
      if ([dns][opcode]) {                          mutate { id => "mutate_add_field_ecs_dns_opcode"
                                                             add_field => { "[dns][op_code]" => "%{[dns][op_code]}" } } }

      # dns.question.class
      if ([zeek_dns][qclass_name]) {                mutate { id => "mutate_add_field_ecs_dns_qclass"
                                                             add_field => { "[dns][question][class]" => "%{[zeek_dns][qclass_name]}" } } }

      # dns.question.type
      if ([zeek_dns][qtype_name]) {                 mutate { id => "mutate_add_field_ecs_dns_qtype"
                                                             add_field => { "[dns][question][type]" => "%{[zeek_dns][qtype_name]}" } } }

      # dns.question.name and dns.type:query
      if ([zeek_dns][query]) {
                            mutate { id => "mutate_add_field_ecs_dns_query"
                                     add_field => { "[dns][question][name]" => "%{[zeek_dns][query]}" } }
        if (![dns][type]) { mutate { id => "mutate_add_field_ecs_dns_type_query"
                                     add_field => { "[dns][type]" => "query" } } }
      }

      if ([dns][type]) {
        # dns.header_flags
        if ([zeek][AA] == "T") {                    mutate { id => "mutate_add_field_ecs_dns_header_flag_aa"
                                                             add_field => { "[dns][header_flags]" => "AA" } } }
        if ([zeek][TC] == "T") {                    mutate { id => "mutate_add_field_ecs_dns_header_flag_tc"
                                                             add_field => { "[dns][header_flags]" => "TC" } } }
        if ([zeek][RD] == "T") {                    mutate { id => "mutate_add_field_ecs_dns_header_flag_rd"
                                                             add_field => { "[dns][header_flags]" => "RD" } } }
        if ([zeek][RA] == "T") {                    mutate { id => "mutate_add_field_ecs_dns_header_flag_ra"
                                                             add_field => { "[dns][header_flags]" => "RA" } } }
      }

      # dns.response_code
      if ([zeek_dns][rcode_name]) {                 mutate { id => "mutate_add_field_ecs_dns_response_code"
                                                             add_field => { "[dns][response_code]" => "%{[zeek_dns][rcode_name]}" } } }

      # dns.id
      if ([zeek_dns][trans_id]) {                   mutate { id => "mutate_add_field_ecs_dns_id"
                                                             add_field => { "[dns][id]" => "%{[zeek_dns][trans_id]}" } } }

      # TODO: domain stuff (dns.question.registered_domain, dns.question.subdomain, dns.question.top_level_domain)
      # perhaps use something like https://github.com/plutonbacon/logstash-filter-publicsuffix
    }

    # ☐ File - Fields describing files. - https://www.elastic.co/guide/en/ecs/current/ecs-file.html
    # ☐ Hash - Hashes, usually file hashes. - https://www.elastic.co/guide/en/ecs/current/ecs-hash.html
    # ☐ HTTP - Fields describing an HTTP request. - https://www.elastic.co/guide/en/ecs/current/ecs-http.html
    # ☐ Network - Fields describing the communication path over which the event happened. - https://www.elastic.co/guide/en/ecs/current/ecs-network.html
    # ☐ Operating System - OS fields contain information about the operating system. - https://www.elastic.co/guide/en/ecs/current/ecs-os.html
    # ☐ Package - These fields contain information about an installed software package. - https://www.elastic.co/guide/en/ecs/current/ecs-package.html
    # ☐ PE Header - These fields contain Windows Portable Executable (PE) metadata. - https://www.elastic.co/guide/en/ecs/current/ecs-pe.html
    # ☐ Process - These fields contain information about a process. - https://www.elastic.co/guide/en/ecs/current/ecs-process.html
    # ☐ Related - Fields meant to facilitate pivoting around a piece of data. - https://www.elastic.co/guide/en/ecs/current/ecs-related.html
    # ☐ Rule - Fields to capture details about rules used to generate alerts or other notable events. - https://www.elastic.co/guide/en/ecs/current/ecs-rule.html
    # ☐ Threat - Fields to classify events and alerts according to a threat taxonomy. - https://www.elastic.co/guide/en/ecs/current/ecs-threat.html
    # ☐ TLS - Fields describing a TLS connection. - https://www.elastic.co/guide/en/ecs/current/ecs-tls.html
    # ☐ URL - Fields that let you store URLs in various forms. - https://www.elastic.co/guide/en/ecs/current/ecs-url.html
    # ☐ User - Fields to describe the user relevant to the event. - https://www.elastic.co/guide/en/ecs/current/ecs-user.html
    # ☐ User agent - Fields to describe a browser user_agent string. - https://www.elastic.co/guide/en/ecs/current/ecs-user_agent.html
    # ☐ VLAN - Fields to describe observed VLAN information. - https://www.elastic.co/guide/en/ecs/current/ecs-vlan.html
    # ☐ Vulnerability - Fields to describe the vulnerability relevant to an event. - https://www.elastic.co/guide/en/ecs/current/ecs-vulnerability.html

    # ☐ Agent - Fields about the monitoring agent. - https://www.elastic.co/guide/en/ecs/current/ecs-agent.html
    #   - agent will be set for logs coming from a sensor (hedgehog)
    #   - double-check agent set for local Malcolm filebeat Zeek logs to ensure it's set correctly, too
    # ☐ Observer - Fields describing an entity observing the event from outside the host. - https://www.elastic.co/guide/en/ecs/current/ecs-observer.html
    #   - anything useful we could get here from either Malcolm or Hedgehog?
    # ☐ Destination - Fields about the destination side of a network connection, used with source. - https://www.elastic.co/guide/en/ecs/current/ecs-destination.html
    # ☐ Source - Fields about the source side of a network connection, used with destination. - https://www.elastic.co/guide/en/ecs/current/ecs-source.html
    #   - I have client/destination, do I need to do anything with this as well?
    # ☐ Error - Fields about errors of any kind. - https://www.elastic.co/guide/en/ecs/current/ecs-error.html
    #   - There could be a lot of cases where there are errors, do we lump them all in here? we'd need to idenfity
    #     instances of error, error_msg, reply, status code, etc...

    # 🗷 Base - All fields defined directly at the top level - https://www.elastic.co/guide/en/ecs/current/ecs-base.html
    # 🗷 Cloud - Fields about the cloud resource. - https://www.elastic.co/guide/en/ecs/current/ecs-cloud.html
    # 🗷 Code Signature - These fields contain information about binary code signatures. - https://www.elastic.co/guide/en/ecs/current/ecs-code_signature.html
    # 🗷 Container - Fields describing the container that generated this event. - https://www.elastic.co/guide/en/ecs/current/ecs-container.html
    # 🗷 DLL - These fields contain information about code libraries dynamically loaded into processes. - https://www.elastic.co/guide/en/ecs/current/ecs-dll.html
    # 🗷 ECS - Meta-information specific to ECS. - https://www.elastic.co/guide/en/ecs/current/ecs-ecs.html
    # 🗷 Group - User's group relevant to the event. - https://www.elastic.co/guide/en/ecs/current/ecs-group.html
    # 🗷 Host - Fields describing the relevant computing instance. - https://www.elastic.co/guide/en/ecs/current/ecs-host.html
    # 🗷 Interface - Fields to describe observer interface information. - https://www.elastic.co/guide/en/ecs/current/ecs-interface.html
    # 🗷 Log - Details about the event's logging mechanism. - https://www.elastic.co/guide/en/ecs/current/ecs-log.html
    # 🗷 Organization - Fields describing the organization or company the event is associated with. - https://www.elastic.co/guide/en/ecs/current/ecs-organization.html
    # 🗷 Registry - Fields related to Windows Registry operations. - https://www.elastic.co/guide/en/ecs/current/ecs-registry.html
    # 🗷 Service - Fields describing the service for or from which the data was collected. - https://www.elastic.co/guide/en/ecs/current/ecs-service.html
    # 🗷 Tracing - Fields related to distributed tracing. - https://www.elastic.co/guide/en/ecs/current/ecs-tracing.html

  } # end if ENV_LOGSTASH_ZEEK_TO_ECS

}