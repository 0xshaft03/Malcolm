filter {

  # set data types for fields that belong to various suricata logs

  date {
    id => "date_suricata_timestamp_match"
    match => [ "[suricata][timestamp]", "ISO8601" ]
    target => "[@timestamp]"
  }

  date {
    id => "date_suricata_timestamp_iso_match"
    match => [ "[suricata][timestamp]", "ISO8601" ]
    target => "[suricata][timestamp]"
  }

  if ([suricata][flow]) {
    date {
      id => "date_suricata_flow_start_iso_match"
      match => [ "[suricata][flow][start]", "ISO8601" ]
      target => "[suricata][flow][start]"
    }
    date {
      id => "date_suricata_flow_end_iso_match"
      match => [ "[suricata][flow][end]", "ISO8601" ]
      target => "[suricata][flow][end]"
    }
  }

  if ([suricata][dnp3][application][objects][points][timestamp]) {
    ruby {
      id => "ruby_suricata_dnp3_application_timestamp_calc"
      init => "require 'time'"
      code => "
        timeVals = event.get('[suricata][dnp3][application][objects][points][timestamp]')
        if !timeVals.is_a?(Array) then
          newVals = Array.new
          newVals.push(timeVals)
          timeVals = newVals
        end
        isoVals = Array.new
        Array(timeVals).each do |val|
          iVal = val.to_i
          if (iVal > (1000*60*60*24*365)) then
            isoVals << Time.at(0, iVal, :millisecond).utc.iso8601(3)
          end
        end
        event.set('[@metadata][suricata_dnp3_app_time]', isoVals) unless (isoVals.length == 0)
      "
    }
    if ([@metadata][suricata_dnp3_app_time]) {
      date {
        id => "date_suricata_dnp3_application_timestamp_convert"
        match => [ "[@metadata][suricata_dnp3_app_time]", "ISO8601" ]
        target => "[suricata][dnp3][application][objects][points][timestamp]"
      }
    } else {
      mutate { id => "mutate_remove_field_suricata_dnp3_application_timestamp_zero"
               remove_field => [ "[suricata][dnp3][application][objects][points][timestamp]" ] }
    }
  } # [suricata][dnp3][application][objects][points][timestamp]

  if ([suricata][dnp3][request][application][objects][points][timestamp]) {
    ruby {
      id => "ruby_suricata_dnp3_request_timestamp_calc"
      init => "require 'time'"
      code => "
        timeVals = event.get('[suricata][dnp3][request][application][objects][points][timestamp]')
        if !timeVals.is_a?(Array) then
          newVals = Array.new
          newVals.push(timeVals)
          timeVals = newVals
        end
        isoVals = Array.new
        Array(timeVals).each do |val|
          iVal = val.to_i
          if (iVal > (1000*60*60*24*365)) then
            isoVals << Time.at(0, iVal, :millisecond).utc.iso8601(3)
          end
        end
        event.set('[@metadata][suricata_dnp3_req_time]', isoVals) unless (isoVals.length == 0)
      "
    }
    if ([@metadata][suricata_dnp3_req_time]) {
      date {
        id => "date_suricata_dnp3_request_timestamp_convert"
        match => [ "[@metadata][suricata_dnp3_req_time]", "ISO8601" ]
        target => "[suricata][dnp3][request][application][objects][points][timestamp]"
      }
    } else {
      mutate { id => "mutate_remove_field_suricata_dnp3_request_timestamp_zero"
               remove_field => [ "[suricata][dnp3][request][application][objects][points][timestamp]" ] }
    }
  } # [suricata][dnp3][request][application][objects][points][timestamp]

}